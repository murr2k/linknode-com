apiVersion: v1
kind: ConfigMap
metadata:
  name: flask-app-code
  namespace: demo-app
data:
  app.py: |
    from flask import Flask, render_template_string, redirect, url_for
    import os
    from blueprints.api_routes import api_bp
    from power_monitor import power_monitor

    app = Flask(__name__)

    # Get base path from environment variable
    BASE_PATH = os.environ.get('BASE_PATH', '')

    # Register blueprints
    app.register_blueprint(api_bp, url_prefix=f'{BASE_PATH}/api')
    app.register_blueprint(power_monitor, url_prefix=f'{BASE_PATH}')

    # Update for_url to handle base path
    original_url_for = app.jinja_env.globals['url_for']
    def url_for_with_base(endpoint, **values):
        # Only add base path for internal routes
        if endpoint.startswith('api_bp.') or endpoint == 'index' or endpoint.startswith('power_monitor.'):
            # The blueprint already includes BASE_PATH, so just use normal url_for
            return original_url_for(endpoint, **values)
        return original_url_for(endpoint, **values)
    
    app.jinja_env.globals['url_for'] = url_for_with_base

    # HTML template as a string
    HTML_TEMPLATE = '''
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Welcome to Rackspace Kubernetes Demo</title>
        <style>
            body {
                font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
                line-height: 1.6;
                margin: 0;
                padding: 0;
                display: flex;
                justify-content: center;
                align-items: center;
                min-height: 100vh;
                background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
                color: #333;
            }
            .container {
                background: white;
                border-radius: 10px;
                box-shadow: 0 5px 20px rgba(0,0,0,0.1);
                padding: 40px;
                max-width: 600px;
                width: 90%;
                text-align: center;
            }
            h1 {
                color: #d21e2b;
                margin-bottom: 10px;
                font-size: 2.5em;
            }
            .subtitle {
                color: #666;
                margin-bottom: 30px;
                font-size: 1.2em;
            }
            .info-grid {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
                gap: 20px;
                margin: 30px 0;
            }
            .info-card {
                background: #f8f9fa;
                padding: 20px;
                border-radius: 8px;
                border: 1px solid #e9ecef;
            }
            .info-card h3 {
                margin: 0 0 10px 0;
                color: #1e3c72;
                font-size: 1.1em;
            }
            .info-card p {
                margin: 0;
                color: #666;
                font-size: 0.9em;
            }
            .kubernetes-logo {
                width: 60px;
                height: 60px;
                margin: 20px auto;
                opacity: 0.8;
            }
            .api-link {
                display: inline-block;
                margin-top: 20px;
                padding: 12px 30px;
                background: #d21e2b;
                color: white;
                text-decoration: none;
                border-radius: 5px;
                font-weight: 500;
                transition: background 0.3s ease;
            }
            .api-link:hover {
                background: #b51a26;
            }
            .footer {
                margin-top: 40px;
                color: #999;
                font-size: 0.9em;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <svg class="kubernetes-logo" viewBox="0 0 722 701" xmlns="http://www.w3.org/2000/svg">
                <path fill="#326ce5" d="M358.5 0C161.5 0 0 161.5 0 358.5S161.5 717 358.5 717 717 555.5 717 358.5 555.5 0 358.5 0zm0 672.4c-173.3 0-314-140.6-314-314s140.6-314 314-314 314 140.6 314 314-140.7 314-314 314z"/>
                <path fill="#326ce5" d="M358.5 152.4c-18.8 0-34 15.2-34 34v86.2c0 2.8-.4 5.6-1.2 8.3-4.9 16.5-20.2 27.8-37.6 27.8H199c-18.8 0-34 15.2-34 34s15.2 34 34 34h86.7c17.4 0 32.7 11.3 37.6 27.8.8 2.7 1.2 5.5 1.2 8.3v86.2c0 18.8 15.2 34 34 34s34-15.2 34-34v-86.2c0-2.8.4-5.6 1.2-8.3 4.9-16.5 20.2-27.8 37.6-27.8H518c18.8 0 34-15.2 34-34s-15.2-34-34-34h-86.7c-17.4 0-32.7-11.3-37.6-27.8-.8-2.7-1.2-5.5-1.2-8.3v-86.2c0-18.8-15.2-34-34-34z"/>
            </svg>
            
            <h1>Welcome to Rackspace</h1>
            <p class="subtitle">Kubernetes Demo Application</p>
            
            <div class="info-grid">
                <div class="info-card">
                    <h3>üèÉ Status</h3>
                    <p>Application Running</p>
                </div>
                <div class="info-card">
                    <h3>üîß Version</h3>
                    <p>{{ version }}</p>
                </div>
                <div class="info-card">
                    <h3>‚ò∏Ô∏è Platform</h3>
                    <p>Kubernetes on Rackspace</p>
                </div>
            </div>
            
            <p style="margin: 30px 0;">This demo application showcases a modern microservices architecture deployed on Rackspace's managed Kubernetes platform.</p>
            
            <a href="{{ url_for('api_bp.api_home') }}" class="api-link">Explore API Endpoints ‚Üí</a>
            
            <div class="footer">
                <p>Container ID: {{ hostname }}</p>
                <p>Powered by Rackspace Cloud</p>
            </div>
        </div>
    </body>
    </html>
    '''

    @app.route(f'{BASE_PATH}/')
    def index():
        # Get hostname (container ID in Kubernetes)
        hostname = os.environ.get('HOSTNAME', 'local')
        
        # Get version from environment or default
        version = os.environ.get('APP_VERSION', '1.0.0')
        
        return render_template_string(HTML_TEMPLATE, hostname=hostname, version=version)

    if __name__ == '__main__':
        app.run(host='0.0.0.0', port=5000)
  api_routes.py: |
    from flask import Blueprint, jsonify
    import os
    import requests
    from datetime import datetime

    api_bp = Blueprint('api_bp', __name__)

    @api_bp.route('/')
    def api_home():
        """API root endpoint"""
        base_url = os.environ.get('BASE_PATH', '')
        return jsonify({
            'message': 'Welcome to the Rackspace Demo API',
            'version': os.environ.get('APP_VERSION', '1.0.0'),
            'endpoints': {
                'health': f'{base_url}/api/health',
                'info': f'{base_url}/api/info',
                'echo': f'{base_url}/api/echo/<message>',
                'db_test': f'{base_url}/api/db-test',
                'power_data': f'{base_url}/api/power-data',
                'power_test': f'{base_url}/api/power-data/test',
                'power_latest': f'{base_url}/api/power-data/latest'
            }
        })

    @api_bp.route('/health')
    def health():
        """Health check endpoint"""
        return jsonify({
            'status': 'healthy',
            'timestamp': datetime.utcnow().isoformat()
        })

    @api_bp.route('/info')
    def info():
        """Information about the application and environment"""
        return jsonify({
            'app_name': 'Rackspace Demo App',
            'version': os.environ.get('APP_VERSION', '1.0.0'),
            'environment': os.environ.get('ENVIRONMENT', 'development'),
            'hostname': os.environ.get('HOSTNAME', 'local'),
            'platform': 'Kubernetes on Rackspace Cloud',
            'features': {
                'api': True,
                'database': os.environ.get('DB_HOST') is not None,
                'monitoring': True
            }
        })

    @api_bp.route('/echo/<message>')
    def echo(message):
        """Echo endpoint - returns the message you send"""
        return jsonify({
            'echo': message,
            'timestamp': datetime.utcnow().isoformat(),
            'hostname': os.environ.get('HOSTNAME', 'local')
        })

    @api_bp.route('/db-test')
    def db_test():
        """Test database connectivity"""
        try:
            # For now, just check if DB environment variables are set
            db_host = os.environ.get('DB_HOST')
            db_name = os.environ.get('DB_NAME')
            
            if db_host and db_name:
                return jsonify({
                    'status': 'configured',
                    'message': f'Database configuration found for {db_name} at {db_host}',
                    'note': 'Actual connection test not implemented in this demo'
                })
            else:
                return jsonify({
                    'status': 'not_configured',
                    'message': 'No database configuration found',
                    'hint': 'Set DB_HOST and DB_NAME environment variables'
                }), 503
                
        except Exception as e:
            return jsonify({
                'status': 'error',
                'message': str(e)
            }), 500
  power_monitor.py: |
    from flask import Blueprint, request, jsonify
    from influxdb_client import InfluxDBClient, Point, WritePrecision
    from influxdb_client.client.write_api import SYNCHRONOUS
    import os
    import logging
    from datetime import datetime

    # Create blueprint for power monitoring endpoints
    power_monitor = Blueprint('power_monitor', __name__)

    # Configure logging
    logging.basicConfig(level=logging.INFO)
    logger = logging.getLogger(__name__)

    # InfluxDB configuration
    INFLUXDB_URL = os.environ.get('INFLUXDB_URL', 'http://influxdb:8086')
    INFLUXDB_TOKEN = os.environ.get('INFLUXDB_TOKEN', 'my-super-secret-auth-token')
    INFLUXDB_ORG = os.environ.get('INFLUXDB_ORG', 'rackspace')
    INFLUXDB_BUCKET = os.environ.get('INFLUXDB_BUCKET', 'power_metrics')

    # Initialize InfluxDB client
    try:
        client = InfluxDBClient(url=INFLUXDB_URL, token=INFLUXDB_TOKEN, org=INFLUXDB_ORG)
        write_api = client.write_api(write_options=SYNCHRONOUS)
        logger.info(f"Connected to InfluxDB at {INFLUXDB_URL}")
    except Exception as e:
        logger.error(f"Failed to connect to InfluxDB: {e}")
        client = None
        write_api = None

    @power_monitor.route('/api/power-data', methods=['POST'])
    def receive_power_data():
        """
        Endpoint to receive power data from EAGLE device
        Only stores the data types that are actually present in each message
        """
        try:
            # Log the incoming request
            logger.info(f"Received power data request from {request.remote_addr}")
            
            # Parse JSON data
            data = request.get_json()
            if not data:
                logger.warning("No JSON data provided, returning empty 200")
                return '', 200
            
            logger.info(f"Power data: {data}")
            
            # Initialize tracking variables
            device_id = data.get('deviceGuid', 'unknown')
            timestamp = datetime.utcnow().isoformat()
            data_received = False
            
            # Check if this is the new EAGLE format with 'body' array
            if 'body' in data and isinstance(data['body'], list):
                # Process each item in the body array
                for item in data['body']:
                    data_type = item.get('dataType', '')
                    item_data = item.get('data', {})
                    
                    # Use item timestamp if available
                    if 'timestamp' in item:
                        try:
                            ts_ms = int(item['timestamp'])
                            timestamp = datetime.fromtimestamp(ts_ms / 1000).isoformat() + 'Z'
                        except:
                            pass
                    
                    # Store each data type separately
                    if data_type == 'InstantaneousDemand' and write_api:
                        # Current power demand (already in kW)
                        demand = float(item_data.get('demand', 0))
                        if demand > 0 or True:  # Store even 0 values for demand
                            try:
                                point = Point("power_demand") \
                                    .tag("device_id", device_id) \
                                    .tag("data_type", "InstantaneousDemand") \
                                    .field("demand_kw", demand) \
                                    .time(timestamp, WritePrecision.NS)
                                
                                write_api.write(bucket=INFLUXDB_BUCKET, record=point)
                                logger.info(f"Stored InstantaneousDemand: {demand} kW")
                                data_received = True
                            except Exception as e:
                                logger.error(f"Failed to write demand to InfluxDB: {e}")
                        
                    elif data_type == 'CurrentSummation' and write_api:
                        # Total energy consumed (already in kWh)
                        total_delivered = float(item_data.get('summationDelivered', 0))
                        total_received = float(item_data.get('summationReceived', 0))
                        
                        if total_delivered > 0 or total_received > 0:
                            try:
                                point = Point("power_summation") \
                                    .tag("device_id", device_id) \
                                    .tag("data_type", "CurrentSummation") \
                                    .field("total_delivered_kwh", total_delivered) \
                                    .field("total_received_kwh", total_received) \
                                    .field("net_consumption_kwh", total_delivered - total_received) \
                                    .time(timestamp, WritePrecision.NS)
                                
                                write_api.write(bucket=INFLUXDB_BUCKET, record=point)
                                logger.info(f"Stored CurrentSummation: delivered={total_delivered} kWh, received={total_received} kWh")
                                data_received = True
                            except Exception as e:
                                logger.error(f"Failed to write summation to InfluxDB: {e}")
                    
                    elif data_type == 'Price' and write_api:
                        # Price information
                        price = float(item_data.get('price', 0))
                        price_tier = item_data.get('PriceTier', 0)
                        
                        if price > 0:
                            try:
                                point = Point("power_price") \
                                    .tag("device_id", device_id) \
                                    .tag("data_type", "Price") \
                                    .tag("tier", str(price_tier)) \
                                    .field("price_usd", price) \
                                    .field("price_label", item_data.get('PriceRateLabel', 'Unknown')) \
                                    .time(timestamp, WritePrecision.NS)
                                
                                write_api.write(bucket=INFLUXDB_BUCKET, record=point)
                                logger.info(f"Stored Price: ${price} USD")
                                data_received = True
                            except Exception as e:
                                logger.error(f"Failed to write price to InfluxDB: {e}")
                    
                    else:
                        logger.info(f"Received {data_type} data (not stored)")
            
            else:
                # Old format fallback (for testing)
                if 'Demand' in data and write_api:
                    multiplier = float(data.get('Multiplier', 1))
                    divisor = float(data.get('Divisor', 1))
                    demand = float(data.get('Demand', 0)) * multiplier / divisor
                    
                    point = Point("power_demand") \
                        .tag("device_id", device_id) \
                        .tag("data_type", "InstantaneousDemand") \
                        .field("demand_kw", demand) \
                        .time(timestamp, WritePrecision.NS)
                    
                    write_api.write(bucket=INFLUXDB_BUCKET, record=point)
                    data_received = True
            
            # Return EAGLE-compatible response
            return '', 200
            
        except Exception as e:
            logger.error(f"Error processing power data: {e}")
            return '', 500

    @power_monitor.route('/api/power-data/test', methods=['GET'])
    def test_endpoint():
        """Test endpoint to verify the API is working"""
        return jsonify({
            'status': 'ok',
            'message': 'Power monitoring endpoint is active',
            'influxdb_connected': client is not None,
            'timestamp': datetime.utcnow().isoformat()
        })

    @power_monitor.route('/api/power-data/latest', methods=['GET'])
    def get_latest_reading():
        """Get the latest power reading from InfluxDB"""
        if not client:
            return jsonify({'error': 'InfluxDB not connected'}), 503
        
        try:
            query_api = client.query_api()
            
            # Get latest demand
            demand_query = f'''
            from(bucket: "{INFLUXDB_BUCKET}")
                |> range(start: -1h)
                |> filter(fn: (r) => r["_measurement"] == "power_demand")
                |> filter(fn: (r) => r["_field"] == "demand_kw")
                |> last()
            '''
            
            # Get latest summation
            summation_query = f'''
            from(bucket: "{INFLUXDB_BUCKET}")
                |> range(start: -1h)
                |> filter(fn: (r) => r["_measurement"] == "power_summation")
                |> last()
            '''
            
            demand_result = query_api.query(demand_query)
            summation_result = query_api.query(summation_query)
            
            latest_data = {}
            
            # Process demand data
            for table in demand_result:
                for record in table.records:
                    latest_data['demand_kw'] = record.get_value()
                    latest_data['demand_timestamp'] = record.get_time().isoformat()
            
            # Process summation data
            for table in summation_result:
                for record in table.records:
                    field = record.get_field()
                    value = record.get_value()
                    latest_data[field] = value
                    latest_data['summation_timestamp'] = record.get_time().isoformat()
            
            if latest_data:
                return jsonify({
                    'status': 'success',
                    'data': latest_data
                })
            else:
                return jsonify({
                    'status': 'no_data',
                    'message': 'No power readings found in the last hour'
                }), 404
                
        except Exception as e:
            logger.error(f"Error querying InfluxDB: {e}")
            return jsonify({'error': str(e)}), 500