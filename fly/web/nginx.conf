server {
    listen 80;
    server_name _;
    
    root /usr/share/nginx/html;
    index index.html;
    
    # Enable gzip compression
    gzip on;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
    gzip_min_length 1000;
    
    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header Permissions-Policy "geolocation=(), microphone=(), camera=()" always;
    
    # Content Security Policy
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' https://linknode-grafana.fly.dev; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; frame-src https://linknode-grafana.fly.dev; connect-src 'self' https://linknode-grafana.fly.dev https://linknode-influxdb.fly.dev;" always;
    
    # CORS headers for API access
    # Check if origin is allowed and set CORS headers accordingly
    set $cors_origin "";
    if ($http_origin ~* ^https://(linknode\.com|linknode-grafana\.fly\.dev|linknode-influxdb\.fly\.dev|linknode-eagle-monitor\.fly\.dev)$) {
        set $cors_origin $http_origin;
    }
    
    # Add CORS headers - empty values won't be sent
    add_header Access-Control-Allow-Origin $cors_origin always;
    add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
    add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization" always;
    add_header Access-Control-Allow-Credentials "true" always;
    
    # Cache static assets
    location ~* \.(jpg|jpeg|png|gif|ico|css|js)$ {
        expires 1h;
        add_header Cache-Control "public, immutable";
    }
    
    # Serve JSON files with correct content type
    location ~* \.json$ {
        add_header Content-Type "application/json";
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        try_files $uri =404;
    }
    
    # Handle OPTIONS requests
    location / {
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin $cors_origin always;
            add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
            add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization" always;
            add_header Access-Control-Allow-Credentials "true" always;
            add_header Access-Control-Max-Age 1728000 always;
            add_header Content-Type 'text/plain; charset=utf-8';
            add_header Content-Length 0;
            return 204;
        }
        
        try_files $uri $uri/ /index.html;
    }
    
    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
    
    # Protect admin area - return 404 to hide existence
    location /admin {
        return 404;
    }
    
    # Protect private area - return 404 to hide existence  
    location /private {
        return 404;
    }
    
    # API endpoint protection - only allow specific methods
    location /api {
        # Restrict methods
        if ($request_method !~ ^(GET|POST|OPTIONS)$) {
            return 405;
        }
        
        # Add rate limiting headers
        add_header X-RateLimit-Limit "60" always;
        add_header X-RateLimit-Window "60s" always;
        
        # Return 404 for now since no API is implemented here
        return 404;
    }
    
    # Disable access to hidden files
    location ~ /\. {
        deny all;
        return 404;
    }
}