name: Deploy to Fly.io

on:
  push:
    branches: [ main ]
    paths:
      - 'fly/**'
      - '.github/workflows/deploy-fly.yml'
  workflow_dispatch:
    inputs:
      service:
        description: 'Service to deploy (all, web, grafana, influxdb, eagle-monitor)'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - web
          - grafana
          - influxdb
          - eagle-monitor

env:
  FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Fly CLI
      uses: superfly/flyctl-actions/setup-flyctl@master
    
    - name: Verify Fly.io Authentication
      run: |
        echo "Checking Fly.io authentication..."
        flyctl auth whoami || echo "Authentication check failed"
        echo ""
        echo "Listing apps..."
        flyctl apps list | grep linknode || echo "No linknode apps found"
      env:
        FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

    - name: Deploy InfluxDB
      if: github.event.inputs.service == 'all' || github.event.inputs.service == 'influxdb' || github.event.inputs.service == ''
      run: |
        cd fly/influxdb
        flyctl deploy --remote-only --wait-timeout 300
      env:
        FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
      continue-on-error: false

    - name: Deploy Eagle Monitor
      if: github.event.inputs.service == 'all' || github.event.inputs.service == 'eagle-monitor' || github.event.inputs.service == ''
      run: |
        cd fly/eagle-monitor
        flyctl deploy --remote-only --wait-timeout 300
      env:
        FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
      continue-on-error: false

    - name: Deploy Grafana
      if: github.event.inputs.service == 'all' || github.event.inputs.service == 'grafana' || github.event.inputs.service == ''
      run: |
        cd fly/grafana
        flyctl deploy --remote-only --wait-timeout 300
      env:
        FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
      continue-on-error: false

    - name: Deploy Web Interface
      if: github.event.inputs.service == 'all' || github.event.inputs.service == 'web' || github.event.inputs.service == ''
      run: |
        cd fly/web
        
        # Generate build info
        echo "Generating build-info.json..."
        cat > build-info.json << EOF
        {
          "version": "v1.0.${{ github.run_number }}",
          "buildDate": "$(date -u +%Y-%m-%d)",
          "commit": "${{ github.sha }}",
          "environment": "production",
          "branch": "${{ github.ref_name }}",
          "buildNumber": "${{ github.run_number }}",
          "actor": "${{ github.actor }}"
        }
        EOF
        
        echo "Build info:"
        cat build-info.json
        
        flyctl deploy --remote-only --wait-timeout 300
      env:
        FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
      continue-on-error: false

    - name: Verify Deployments
      if: always()
      run: |
        echo "=== Deployment Status ==="
        flyctl status -a linknode-influxdb || echo "InfluxDB: Failed to get status"
        echo ""
        flyctl status -a linknode-eagle-monitor || echo "Eagle Monitor: Failed to get status"
        echo ""
        flyctl status -a linknode-grafana || echo "Grafana: Failed to get status"
        echo ""
        flyctl status -a linknode-web || echo "Web: Failed to get status"
      env:
        FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

    - name: Create deployment summary
      if: always()
      run: |
        echo "## üöÄ Fly.io Deployment Status" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Public Access URLs" >> $GITHUB_STEP_SUMMARY
        echo "- **Main Site**: https://linknode.com" >> $GITHUB_STEP_SUMMARY
        echo "- **Direct Fly URL**: https://linknode-web.fly.dev" >> $GITHUB_STEP_SUMMARY
        echo "- **Grafana Dashboard**: https://linknode-grafana.fly.dev" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Service Endpoints" >> $GITHUB_STEP_SUMMARY
        echo "- **Eagle Monitor API**: https://linknode-eagle-monitor.fly.dev/api/stats" >> $GITHUB_STEP_SUMMARY
        echo "- **Health Check**: https://linknode-eagle-monitor.fly.dev/health" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Deployment Details" >> $GITHUB_STEP_SUMMARY
        echo "- **Service**: ${{ github.event.inputs.service || 'all' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Time**: $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_STEP_SUMMARY
        echo "- **Triggered by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY

    - name: Check service health
      if: success()
      run: |
        echo "Checking service health..."
        sleep 30  # Wait for services to stabilize
        
        # Check each service
        curl -sf https://linknode-web.fly.dev > /dev/null && echo "‚úÖ Web interface is healthy" || echo "‚ùå Web interface is not responding"
        curl -sf https://linknode-grafana.fly.dev/api/health > /dev/null && echo "‚úÖ Grafana is healthy" || echo "‚ùå Grafana is not responding"
        curl -sf https://linknode-eagle-monitor.fly.dev/health > /dev/null && echo "‚úÖ Eagle Monitor is healthy" || echo "‚ùå Eagle Monitor is not responding"

    # Slack Notifications
    # For Slack notifications, we recommend using GitHub's native Slack integration:
    # 1. Install GitHub Slack app: https://slack.com/apps/A01BP7R4KNY-github
    # 2. In Slack: /github signin (to connect your account)
    # 3. In Slack: /github subscribe murr2k/rackspace-k8s-demo workflows
    # This provides automatic notifications without any code or secrets!
    
    # Optional: Custom webhook notification (if SLACK_WEBHOOK_URL secret is set)
    - name: Slack Notification - Success
      if: success() && env.SLACK_WEBHOOK_URL != ''
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL || '' }}
      run: |
        if [ -n "$SLACK_WEBHOOK_URL" ]; then
          curl -X POST "$SLACK_WEBHOOK_URL" \
            -H 'Content-type: application/json' \
            --data '{
              "text": "‚úÖ Fly.io Deployment Successful",
              "attachments": [{
                "color": "good",
                "fields": [
                  {"title": "Service", "value": "'"${{ github.event.inputs.service || 'all' }}"'", "short": true},
                  {"title": "Branch", "value": "'"${{ github.ref_name }}"'", "short": true},
                  {"title": "Author", "value": "'"${{ github.actor }}"'", "short": true},
                  {"title": "Commit", "value": "'"${{ github.sha.substring(0, 7) }}"'", "short": true}
                ],
                "actions": [
                  {"type": "button", "text": "View Site", "url": "https://linknode.com"},
                  {"type": "button", "text": "View Logs", "url": "'"${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"'"}
                ]
              }]
            }'
        fi
        
    - name: Slack Notification - Failure
      if: failure() && env.SLACK_WEBHOOK_URL != ''
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL || '' }}
      run: |
        if [ -n "$SLACK_WEBHOOK_URL" ]; then
          curl -X POST "$SLACK_WEBHOOK_URL" \
            -H 'Content-type: application/json' \
            --data '{
              "text": "‚ùå Fly.io Deployment Failed",
              "attachments": [{
                "color": "danger",
                "fields": [
                  {"title": "Service", "value": "'"${{ github.event.inputs.service || 'all' }}"'", "short": true},
                  {"title": "Branch", "value": "'"${{ github.ref_name }}"'", "short": true},
                  {"title": "Author", "value": "'"${{ github.actor }}"'", "short": true},
                  {"title": "Commit", "value": "'"${{ github.sha.substring(0, 7) }}"'", "short": true}
                ],
                "actions": [
                  {"type": "button", "text": "View Logs", "url": "'"${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"'"}
                ]
              }]
            }'
        fi