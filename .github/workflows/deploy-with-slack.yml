name: Deploy to Rackspace Kubernetes

on:
  push:
    branches: [ main ]
    paths:
      - 'k8s/**'
      - 'app/**'
      - '.github/workflows/deploy.yml'
  workflow_dispatch:

env:
  KUBE_NAMESPACE: demo-app

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure kubectl
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.KUBECONFIG }}" | base64 -d > $HOME/.kube/config
        chmod 600 $HOME/.kube/config

    - name: Verify connection
      run: |
        kubectl cluster-info
        kubectl get nodes

    - name: Deploy to Kubernetes
      run: |
        # Apply namespace first
        kubectl apply -f k8s/namespace.yaml
        
        # Apply ConfigMaps
        kubectl apply -f k8s/configmap.yaml || true
        kubectl apply -f k8s/configmap-nginx.yaml
        
        # Apply deployment
        kubectl apply -f k8s/deployment-nginx.yaml
        
        # Apply service
        kubectl apply -f k8s/service.yaml
        
        # Apply HPA
        kubectl apply -f k8s/hpa.yaml
        
        # Restart deployment to pick up any ConfigMap changes
        kubectl rollout restart deployment demo-app -n $KUBE_NAMESPACE
        
        # Wait for rollout to complete
        kubectl rollout status deployment demo-app -n $KUBE_NAMESPACE --timeout=300s

    - name: Get deployment info
      if: always()
      run: |
        echo "=== Pods ==="
        kubectl get pods -n $KUBE_NAMESPACE
        echo ""
        echo "=== Services ==="
        kubectl get svc -n $KUBE_NAMESPACE
        echo ""
        echo "=== HPA ==="
        kubectl get hpa -n $KUBE_NAMESPACE
        echo ""
        echo "=== Access URLs ==="
        NODE_IP=$(kubectl get nodes -o jsonpath='{.items[0].status.addresses[?(@.type=="InternalIP")].address}')
        NODE_PORT=$(kubectl get svc demo-app-service -n $KUBE_NAMESPACE -o jsonpath='{.spec.ports[0].nodePort}')
        echo "Direct Access: http://${NODE_IP}:${NODE_PORT}"
        echo "Custom Domain: https://linknode.com"

    - name: Create deployment summary
      if: success()
      run: |
        NODE_IP=$(kubectl get nodes -o jsonpath='{.items[0].status.addresses[?(@.type=="InternalIP")].address}')
        NODE_PORT=$(kubectl get svc demo-app-service -n $KUBE_NAMESPACE -o jsonpath='{.spec.ports[0].nodePort}')
        echo "## 🚀 Deployment Successful!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Access URLs" >> $GITHUB_STEP_SUMMARY
        echo "- **Custom Domain**: https://linknode.com" >> $GITHUB_STEP_SUMMARY
        echo "- **Direct Access**: http://${NODE_IP}:${NODE_PORT}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Deployment Details" >> $GITHUB_STEP_SUMMARY
        echo "- **Namespace**: $KUBE_NAMESPACE" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Time**: $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_STEP_SUMMARY

  notify-slack:
    name: Slack Notification
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    steps:
      - name: Determine status emoji
        id: status
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "emoji=✅" >> $GITHUB_OUTPUT
            echo "status=Success" >> $GITHUB_OUTPUT
          else
            echo "emoji=❌" >> $GITHUB_OUTPUT
            echo "status=Failed" >> $GITHUB_OUTPUT
          fi

      - name: Send custom Slack notification
        if: ${{ secrets.SLACK_WEBHOOK_URL != '' }}
        run: |
          curl -X POST ${{ secrets.SLACK_WEBHOOK_URL }} \
            -H 'Content-Type: application/json' \
            -d '{
              "text": "${{ steps.status.outputs.emoji }} GitHub Actions Deployment ${{ steps.status.outputs.status }}",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "${{ steps.status.outputs.emoji }} Deployment ${{ steps.status.outputs.status }}"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Repository:*\n${{ github.repository }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Branch:*\n${{ github.ref_name }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Commit:*\n`${{ github.sha }}`"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Author:*\n${{ github.actor }}"
                    }
                  ]
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Access URLs:*\n• Custom Domain: https://linknode.com\n• Direct: http://119.9.118.22:32304"
                  }
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Workflow"
                      },
                      "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                    },
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Demo"
                      },
                      "url": "https://linknode.com"
                    }
                  ]
                }
              ]
            }'