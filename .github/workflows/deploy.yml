name: Deploy to Rackspace Kubernetes

on:
  push:
    branches: [ main ]
    paths:
      - 'k8s/**'
      - 'app/**'
      - 'monitoring/**'
      - '.github/workflows/deploy.yml'
  workflow_dispatch:

env:
  KUBE_NAMESPACE: demo-app

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure kubectl
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.KUBECONFIG }}" | base64 -d > $HOME/.kube/config
        chmod 600 $HOME/.kube/config

    - name: Verify connection
      run: |
        kubectl cluster-info
        kubectl get nodes

    - name: Deploy to Kubernetes
      run: |
        # Apply namespace first
        kubectl apply -f k8s/namespace.yaml
        
        # Apply ConfigMaps
        kubectl apply -f k8s/configmap.yaml || true
        # Use the enhanced nginx config if it exists, otherwise fall back to original
        if [ -f "k8s/configmap-nginx-fixed.yaml" ]; then
          kubectl apply -f k8s/configmap-nginx-fixed.yaml
        else
          kubectl apply -f k8s/configmap-nginx.yaml
        fi
        
        # Apply deployment
        kubectl apply -f k8s/deployment-nginx.yaml
        
        # Apply service
        kubectl apply -f k8s/service.yaml
        
        # Apply HPA
        kubectl apply -f k8s/hpa.yaml
        
        # Deploy monitoring components
        echo "=== Deploying Monitoring Stack ==="
        # Apply monitoring yamls if they exist
        for file in k8s/influxdb.yaml k8s/deployment-monitoring.yaml; do
          if [ -f "$file" ]; then
            kubectl apply -f "$file"
          fi
        done
        
        # Apply Grafana with public dashboard support if exists
        if [ -f "k8s/grafana-anonymous-complete.yaml" ]; then
          kubectl apply -f k8s/configmap-grafana-ini.yaml || true
          kubectl apply -f k8s/configmap-grafana-datasources-public-v2.yaml || true
          kubectl apply -f k8s/configmap-grafana-dashboards-public.yaml || true
          kubectl apply -f k8s/grafana-anonymous-complete.yaml
        elif [ -f "k8s/grafana.yaml" ]; then
          kubectl apply -f k8s/grafana.yaml
        fi
        
        # Apply all Grafana dashboards
        for dashboard in k8s/grafana-dashboard-*.yaml; do
          if [ -f "$dashboard" ]; then
            kubectl apply -f "$dashboard"
          fi
        done
        
        # Deploy Eagle XML monitoring if exists
        if [ -f "k8s/configmap-eagle-xml.yaml" ]; then
          kubectl apply -f k8s/configmap-eagle-xml.yaml
          kubectl apply -f k8s/deployment-eagle-monitoring.yaml
          kubectl apply -f k8s/service-eagle-monitoring.yaml
        fi
        
        # Restart deployments to pick up any ConfigMap changes
        kubectl rollout restart deployment demo-app -n $KUBE_NAMESPACE
        kubectl rollout restart deployment demo-app-monitoring -n $KUBE_NAMESPACE || true
        
        # Trigger live dashboard reload without restarting Grafana
        kubectl exec -n $KUBE_NAMESPACE deployment/grafana -- sh -c "touch /var/lib/grafana/dashboards/*.json" || true
        
        # Wait for rollouts to complete
        kubectl rollout status deployment demo-app -n $KUBE_NAMESPACE --timeout=300s
        kubectl rollout status deployment demo-app-monitoring -n $KUBE_NAMESPACE --timeout=300s || true

    - name: Get deployment info
      if: always()
      run: |
        echo "=== Pods ==="
        kubectl get pods -n $KUBE_NAMESPACE
        echo ""
        echo "=== Services ==="
        kubectl get svc -n $KUBE_NAMESPACE
        echo ""
        echo "=== HPA ==="
        kubectl get hpa -n $KUBE_NAMESPACE
        echo ""
        echo "=== Access URLs ==="
        SERVICE_TYPE=$(kubectl get svc demo-app-service -n $KUBE_NAMESPACE -o jsonpath='{.spec.type}')
        if [ "$SERVICE_TYPE" = "NodePort" ]; then
          NODE_IP=$(kubectl get nodes -o jsonpath='{.items[0].status.addresses[?(@.type=="InternalIP")].address}')
          NODE_PORT=$(kubectl get svc demo-app-service -n $KUBE_NAMESPACE -o jsonpath='{.spec.ports[0].nodePort}')
          echo "NodePort URL: http://${NODE_IP}:${NODE_PORT}"
        else
          echo "Service type: $SERVICE_TYPE (not publicly accessible)"
        fi
        echo "Custom Domain: https://linknode.com"
        echo "Known NodePort: http://119.9.118.22:32304"
        echo ""
        echo "=== Monitoring Stack ==="
        echo "Grafana: http://119.9.118.22:30300"
        echo "Power API: http://119.9.118.22:30500/api/power-data"

    - name: Create deployment summary
      if: success()
      run: |
        echo "## üöÄ Deployment Successful!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Access URLs" >> $GITHUB_STEP_SUMMARY
        echo "- **Custom Domain**: https://linknode.com" >> $GITHUB_STEP_SUMMARY
        echo "- **Direct Access**: http://119.9.118.22:32304" >> $GITHUB_STEP_SUMMARY
        echo "- **Cloudflare Tunnel**: https://supply-motherboard-relation-features.trycloudflare.com" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Monitoring Stack" >> $GITHUB_STEP_SUMMARY
        echo "- **Grafana Dashboard**: http://119.9.118.22:30300" >> $GITHUB_STEP_SUMMARY
        echo "- **Power Monitor API**: http://119.9.118.22:30500/api/power-data" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Deployment Details" >> $GITHUB_STEP_SUMMARY
        echo "- **Namespace**: $KUBE_NAMESPACE" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Time**: $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_STEP_SUMMARY

    - name: Generate short SHA
      id: short-sha
      run: echo "sha=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
      
    - name: Slack Notification - Success
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: |
          ‚úÖ *Kubernetes Deployment Successful*
          
          *Environment:* Rackspace K8s
          *Namespace:* ${{ env.KUBE_NAMESPACE }}
          *Branch:* ${{ github.ref_name }}
          *Commit:* `${{ steps.short-sha.outputs.sha }}`
          *Author:* ${{ github.actor }}
          
          *Access URLs:*
          ‚Ä¢ Main Site: https://linknode.com
          ‚Ä¢ Direct: http://119.9.118.22:32304
          ‚Ä¢ Grafana: http://119.9.118.22:30300
          ‚Ä¢ Power API: http://119.9.118.22:30500/api/power-data
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        
    - name: Slack Notification - Failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: |
          ‚ùå *Kubernetes Deployment Failed*
          
          *Environment:* Rackspace K8s
          *Namespace:* ${{ env.KUBE_NAMESPACE }}
          *Branch:* ${{ github.ref_name }}
          *Commit:* `${{ steps.short-sha.outputs.sha }}`
          *Author:* ${{ github.actor }}
          
          *Error:* Check the <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|workflow logs>
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}