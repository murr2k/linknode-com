name: E2E Tests

on:
  push:
    branches: [ main ]
    paths:
      - 'fly/web/**'
      - 'e2e/**'
      - 'playwright.config.ts'
      - 'package.json'
      - 'package-lock.json'
      - '.github/workflows/e2e-tests.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'fly/web/**'
      - 'e2e/**'
      - 'playwright.config.ts'
      - 'package.json'
      - 'package-lock.json'
      - '.github/workflows/e2e-tests.yml'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Test type to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - smoke
          - api
          - visual
          - performance
          - accessibility

concurrency:
  group: e2e-tests-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  checks: write  # For test result publishing
  
jobs:
  # Monitor queue time before tests
  queue-monitor:
    name: Queue Time Monitor
    uses: ./.github/workflows/queue-monitor-reusable.yml
    
  # Browser matrix tests remain separate for true parallelism
  browser-tests:
    timeout-minutes: 30
    runs-on: ubuntu-latest
    needs: [queue-monitor]
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version-file: '.nvmrc'
        
    - name: Cache npm dependencies
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
          
    - name: Install dependencies
      run: npm install
      
    - name: Get Playwright Version
      id: playwright-version
      run: |
        PLAYWRIGHT_VERSION=$(npm list @playwright/test --json | jq -r '.dependencies["@playwright/test"].version')
        echo "version=$PLAYWRIGHT_VERSION" >> $GITHUB_OUTPUT
        echo "Playwright version: $PLAYWRIGHT_VERSION"
        
    - name: Cache Playwright browsers
      uses: actions/cache@v3
      id: playwright-cache
      with:
        path: ~/.cache/ms-playwright
        key: ${{ runner.os }}-playwright-${{ steps.playwright-version.outputs.version }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-playwright-${{ steps.playwright-version.outputs.version }}-
          ${{ runner.os }}-playwright-
      
    - name: Install Playwright Browsers
      if: steps.playwright-cache.outputs.cache-hit != 'true'
      run: npx playwright install --with-deps ${{ matrix.browser }}
      
    - name: Install Playwright deps only
      if: steps.playwright-cache.outputs.cache-hit == 'true'
      run: npx playwright install-deps ${{ matrix.browser }}
      
    - name: Create test directories
      run: mkdir -p test-results/screenshots test-results/errors
      
    - name: Run Playwright tests
      run: |
        if [ "${{ github.event.inputs.test_type }}" = "all" ] || [ -z "${{ github.event.inputs.test_type }}" ]; then
          npx playwright test --project=${{ matrix.browser }}
        else
          npx playwright test --grep @${{ github.event.inputs.test_type }} --project=${{ matrix.browser }}
        fi
      env:
        CI: true
        BASE_URL: https://linknode.com
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-results-${{ matrix.browser }}
        path: test-results/
        retention-days: 30
        
    - name: Upload test report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report-${{ matrix.browser }}
        path: playwright-report/
        retention-days: 30

  # Consolidated specialized tests using matrix
  specialized-tests:
    timeout-minutes: 25
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        test-suite:
          - name: api
            command: test:api
            browsers: chromium
            timeout: 20
          - name: visual
            command: test:visual
            browsers: chromium firefox webkit
            timeout: 25
          - name: performance
            command: test:perf
            browsers: chromium
            timeout: 20
          - name: accessibility
            command: test:a11y
            browsers: chromium firefox webkit
            timeout: 20
            
    name: ${{ matrix.test-suite.name }}-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version-file: '.nvmrc'
        
    - name: Cache npm dependencies
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
          
    - name: Install dependencies
      run: npm install
      
    - name: Get Playwright Version
      id: playwright-version
      run: |
        PLAYWRIGHT_VERSION=$(npm list @playwright/test --json | jq -r '.dependencies["@playwright/test"].version')
        echo "version=$PLAYWRIGHT_VERSION" >> $GITHUB_OUTPUT
        echo "Playwright version: $PLAYWRIGHT_VERSION"
        
    - name: Cache Playwright browsers
      uses: actions/cache@v3
      id: playwright-cache
      with:
        path: ~/.cache/ms-playwright
        key: ${{ runner.os }}-playwright-${{ steps.playwright-version.outputs.version }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-playwright-${{ steps.playwright-version.outputs.version }}-
          ${{ runner.os }}-playwright-
      
    - name: Install Playwright Browsers
      if: steps.playwright-cache.outputs.cache-hit != 'true'
      run: npx playwright install --with-deps ${{ matrix.test-suite.browsers }}
      
    - name: Install Playwright deps only
      if: steps.playwright-cache.outputs.cache-hit == 'true'
      run: npx playwright install-deps ${{ matrix.test-suite.browsers }}
      
    - name: Create test directories
      run: |
        mkdir -p test-results/screenshots test-results/errors
        if [ "${{ matrix.test-suite.name }}" = "visual" ]; then
          mkdir -p test-results/visual-diffs
        fi
      
    - name: Run ${{ matrix.test-suite.name }} tests
      run: npm run ${{ matrix.test-suite.command }}
      env:
        CI: true
        BASE_URL: https://linknode.com
        
    - name: Upload ${{ matrix.test-suite.name }} test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ${{ matrix.test-suite.name }}-test-results
        path: test-results/
        retention-days: 30

  mobile-tests:
    timeout-minutes: 20
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version-file: '.nvmrc'
        
    - name: Cache npm dependencies
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
          
    - name: Install dependencies
      run: npm install
      
    - name: Get Playwright Version
      id: playwright-version
      run: |
        PLAYWRIGHT_VERSION=$(npm list @playwright/test --json | jq -r '.dependencies["@playwright/test"].version')
        echo "version=$PLAYWRIGHT_VERSION" >> $GITHUB_OUTPUT
        echo "Playwright version: $PLAYWRIGHT_VERSION"
        
    - name: Cache Playwright browsers
      uses: actions/cache@v3
      id: playwright-cache
      with:
        path: ~/.cache/ms-playwright
        key: ${{ runner.os }}-playwright-${{ steps.playwright-version.outputs.version }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-playwright-${{ steps.playwright-version.outputs.version }}-
          ${{ runner.os }}-playwright-
      
    - name: Install Playwright Browsers
      if: steps.playwright-cache.outputs.cache-hit != 'true'
      run: npx playwright install --with-deps chromium
      
    - name: Install Playwright deps only
      if: steps.playwright-cache.outputs.cache-hit == 'true'
      run: npx playwright install-deps chromium
      
    - name: Run mobile tests
      run: |
        npx playwright test --project="Mobile Chrome"
        npx playwright test --project="Mobile Safari"
      env:
        CI: true
        BASE_URL: https://linknode.com
        
    - name: Upload mobile test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-results-mobile
        path: test-results/
        retention-days: 30

  test-summary:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    needs: [browser-tests, specialized-tests, mobile-tests]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: all-results/
        
    - name: Merge test results
      run: |
        mkdir -p merged-results
        find all-results -name "*.xml" -exec cp {} merged-results/ \;
        find all-results -name "*.json" -exec cp {} merged-results/ \;
        
    - name: Generate summary report
      run: |
        echo "# E2E Test Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Count test files
        echo "- Total test files: $(find merged-results -name "*.xml" | wc -l)" >> $GITHUB_STEP_SUMMARY
        echo "- Screenshot artifacts: $(find all-results -name "*.png" | wc -l)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "## Test Categories Run" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Browser Tests (3 browsers)" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ API Integration Tests" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Visual Regression Tests" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Performance Tests" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Accessibility Tests" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Mobile Tests" >> $GITHUB_STEP_SUMMARY
        
    - name: Publish test results
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always()
      with:
        files: |
          merged-results/**/*.xml
        check_name: E2E Test Results
        comment_mode: always
        
    - name: Generate short SHA
      id: short-sha
      run: echo "sha=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
        
    - name: Slack Notification - Success
      if: success() && env.SLACK_WEBHOOK_URL != ''
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL || '' }}
      run: |
        if [ -n "$SLACK_WEBHOOK_URL" ]; then
          curl -X POST "$SLACK_WEBHOOK_URL" \
            -H 'Content-type: application/json' \
            --data '{
              "text": "✅ E2E Tests Passed",
              "attachments": [{
                "color": "good",
                "fields": [
                  {"title": "Branch", "value": "'"${{ github.ref_name }}"'", "short": true},
                  {"title": "Commit", "value": "'"${{ steps.short-sha.outputs.sha }}"'", "short": true},
                  {"title": "Author", "value": "'"${{ github.actor }}"'", "short": true},
                  {"title": "Test Type", "value": "'"${{ github.event.inputs.test_type || 'all' }}"'", "short": true}
                ],
                "footer": "All test suites passed",
                "actions": [
                  {"type": "button", "text": "View Results", "url": "'"${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"'"}
                ]
              }]
            }'
        fi
        
    - name: Slack Notification - Failure
      if: failure() && env.SLACK_WEBHOOK_URL != ''
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL || '' }}
      run: |
        if [ -n "$SLACK_WEBHOOK_URL" ]; then
          # Build failed jobs list
          FAILED_JOBS=""
          [ "${{ needs.browser-tests.result }}" = "failure" ] && FAILED_JOBS="${FAILED_JOBS}Browser Tests ❌\\n"
          [ "${{ needs.specialized-tests.result }}" = "failure" ] && FAILED_JOBS="${FAILED_JOBS}Specialized Tests ❌\\n"
          [ "${{ needs.mobile-tests.result }}" = "failure" ] && FAILED_JOBS="${FAILED_JOBS}Mobile Tests ❌\\n"
          
          curl -X POST "$SLACK_WEBHOOK_URL" \
            -H 'Content-type: application/json' \
            --data '{
              "text": "❌ E2E Tests Failed",
              "attachments": [{
                "color": "danger",
                "fields": [
                  {"title": "Branch", "value": "'"${{ github.ref_name }}"'", "short": true},
                  {"title": "Commit", "value": "'"${{ steps.short-sha.outputs.sha }}"'", "short": true},
                  {"title": "Author", "value": "'"${{ github.actor }}"'", "short": true},
                  {"title": "Test Type", "value": "'"${{ github.event.inputs.test_type || 'all' }}"'", "short": true},
                  {"title": "Failed Jobs", "value": "'"${FAILED_JOBS}"'", "short": false}
                ],
                "actions": [
                  {"type": "button", "text": "View Failed Tests", "url": "'"${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"'"}
                ]
              }]
            }'
        fi